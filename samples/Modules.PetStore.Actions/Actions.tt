<#@ template language="C#" hostspecific="true" debug="true" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    WriteLine("""
    //-------------------------------------------------------------------
    // <auto-generated>
    //     This code was generated by a tool.
    //
    //     Changes to this file may cause incorrect behavior and will be lost if
    //     the code is regenerated.
    // </auto-generated>
    //-------------------------------------------------------------------

    using System;
    using System.Net.Http;
    using Microsoft.PowerPlatform.PowerAutomate.Desktop.Actions.SDK;
    using Microsoft.PowerPlatform.PowerAutomate.Desktop.Actions.SDK.Attributes;
    using PowerAutomate.Desktop.PetStore.Client;

    namespace PowerAutomate.Desktop.Modules.PetStore.Actions;
    """);
    WriteLine(string.Empty);

    const string clientProjectName = "PetStore.Client";
    const string clientTypeName = "PetStoreClient";
    const string baseAddress = "https://petstore3.swagger.io/api/v3/";
    var clientAssemblyFilePath = Host.ResolveAssemblyReference(@$"$(SolutionDir)samples\{clientProjectName}\bin\Debug\$(SolutionName).{clientProjectName}.dll");
    var clientAssembly = Assembly.LoadFile(clientAssemblyFilePath);
    var clientType = clientAssembly.ExportedTypes.Single(type => type.Name.Equals($"I{clientTypeName}", StringComparison.InvariantCultureIgnoreCase));
    var methods = clientType.GetMethods()
                            .GroupBy(method => method.Name)
                            .Select(group => group.OrderBy(method => method.GetParameters().Length).Last())
                            .ToList();

    foreach (var method in methods)
    {
        var methodName = method.Name.EndsWith("Async", StringComparison.InvariantCultureIgnoreCase)
            ? method.Name.Substring(0, method.Name.LastIndexOf("Async", StringComparison.InvariantCultureIgnoreCase))
            : method.Name;

        var parameters = method.GetParameters()
                               .Where(parameter => parameter.ParameterType.Name != "CancellationToken")
                               .ToList();
        var inputArguments = new Dictionary<string, string>();

        foreach (var parameter in parameters)
        {
            string inputArgumentTypeFullName;
            string inputArgumentName;

            if (parameter.ParameterType.IsGenericType)
            {
                var genericTypeDefinition = parameter.ParameterType.GetGenericTypeDefinition();
                var genericTypeArguments = string.Join(",", parameter.ParameterType.GenericTypeArguments.Select(arg => arg.FullName));
                
                inputArgumentTypeFullName = $"{genericTypeDefinition.FullName!.Split('`')[0]}<{genericTypeArguments}>";
                inputArgumentName = parameter.Name; 
            }
            else
            {
                inputArgumentTypeFullName = parameter.ParameterType.FullName!;
                inputArgumentName = parameter.Name;
            }
            
            inputArguments.Add(inputArgumentName, inputArgumentTypeFullName);
        }

        string? outputArgumentTypeFullName = null;
        const string outputArgumentName = "Result";

        if (method.ReturnType.Name == "Task" || method.ReturnType.BaseType?.Name == "Task")
        {
            if (method.ReturnType.IsGenericType)
            {
                var responseType = method.ReturnType.GenericTypeArguments.First();
                if (responseType.IsGenericType)
                {
                    var genericTypeDefinition = responseType.GetGenericTypeDefinition();
                    var genericTypeArguments = string.Join(",", responseType.GenericTypeArguments.Select(arg => arg.FullName));
                    
                    outputArgumentTypeFullName = $"{genericTypeDefinition.FullName!.Split('`')[0]}<{genericTypeArguments}>";
                }
                else
                {
                    outputArgumentTypeFullName = responseType.FullName;
                }
            }
        }
        else
        {
            outputArgumentTypeFullName = method.ReturnType.Name;
        }

        WriteLine($"[Action(Id = \"{methodName}\")]");
        WriteLine("[Throws(ErrorCodes.Unknown)]");
        WriteLine($"public class {methodName}Action : ActionBase");
        WriteLine("{");
        PushIndent("    ");

        var inputArgumentOrder = 1;
        foreach (var inputArgument in inputArguments)
        {
            WriteLine($"[InputArgument(Order = {inputArgumentOrder++}, Required = true)]");
            WriteLine($"public {inputArgument.Value} {inputArgument.Key} {{ get; set; }}");
        }

        if (!string.IsNullOrWhiteSpace(outputArgumentTypeFullName) && !string.IsNullOrWhiteSpace(outputArgumentName))
        {
            WriteLine("[OutputArgument(Order = 1)]");
            WriteLine($"public {outputArgumentTypeFullName} {outputArgumentName} {{ get; set; }}");
        }

        WriteLine("public override void Execute(ActionContext context)");
        WriteLine("{");
        PushIndent("    ");
        WriteLine("try");
        WriteLine("{");
        PushIndent("    ");
        WriteLine("using var httpClient = new HttpClient();");
        WriteLine($"httpClient.BaseAddress = new System.Uri(\"{baseAddress}/\");");
        WriteLine($"var client = new {clientTypeName}(httpClient);");

        string? arguments = null;
        if (inputArguments.Any())
        {
            arguments = $"{string.Join(", ", inputArguments.Keys)}, ";
        }
        arguments += "System.Threading.CancellationToken.None";

        if (!string.IsNullOrWhiteSpace(outputArgumentTypeFullName) && !string.IsNullOrWhiteSpace(outputArgumentName))
        {
            Write($"{outputArgumentName} = ");
        }

        WriteLine($"client.{method.Name}({arguments}).GetAwaiter().GetResult();");
        PopIndent();
        WriteLine("}");
        WriteLine("catch (Exception ex)");
        WriteLine("{");
        PushIndent("    ");
        WriteLine("throw new ActionException(ErrorCodes.Unknown, ex.Message, ex);");
        PopIndent();
        WriteLine("}");
        PopIndent();
        WriteLine("}");
        PopIndent();
        WriteLine("}");
        WriteLine(string.Empty);
    }
#>