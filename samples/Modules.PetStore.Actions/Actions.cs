//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Net.Http;
using Microsoft.PowerPlatform.PowerAutomate.Desktop.Actions.SDK;
using Microsoft.PowerPlatform.PowerAutomate.Desktop.Actions.SDK.Attributes;
using PowerAutomate.Desktop.PetStore.Client;

namespace PowerAutomate.Desktop.Modules.PetStore.Actions;

[Action(Id = "UploadFile")]
[Throws(ErrorCodes.Unknown)]
public class UploadFileAction : ActionBase
{
    [InputArgument(Order = 1, Required = true)]
    public System.Int64 petId { get; set; }
    [InputArgument(Order = 2, Required = true)]
    public System.String additionalMetadata { get; set; }
    [InputArgument(Order = 3, Required = true)]
    public PowerAutomate.Desktop.PetStore.Client.FileParameter file { get; set; }
    [OutputArgument(Order = 1)]
    public PowerAutomate.Desktop.PetStore.Client.ApiResponse Result { get; set; }
    public override void Execute(ActionContext context)
    {
        try
        {
            using var httpClient = new HttpClient();
            httpClient.BaseAddress = new System.Uri("https://petstore3.swagger.io/api/v3//");
            var client = new PetStoreClient(httpClient);
            Result = client.UploadFileAsync(petId, additionalMetadata, file, System.Threading.CancellationToken.None).GetAwaiter().GetResult();
        }
        catch (Exception ex)
        {
            throw new ActionException(ErrorCodes.Unknown, ex.Message, ex);
        }
    }
}

[Action(Id = "AddPet")]
[Throws(ErrorCodes.Unknown)]
public class AddPetAction : ActionBase
{
    [InputArgument(Order = 1, Required = true)]
    public PowerAutomate.Desktop.PetStore.Client.Pet body { get; set; }
    public override void Execute(ActionContext context)
    {
        try
        {
            using var httpClient = new HttpClient();
            httpClient.BaseAddress = new System.Uri("https://petstore3.swagger.io/api/v3//");
            var client = new PetStoreClient(httpClient);
            client.AddPetAsync(body, System.Threading.CancellationToken.None).GetAwaiter().GetResult();
        }
        catch (Exception ex)
        {
            throw new ActionException(ErrorCodes.Unknown, ex.Message, ex);
        }
    }
}

[Action(Id = "UpdatePet")]
[Throws(ErrorCodes.Unknown)]
public class UpdatePetAction : ActionBase
{
    [InputArgument(Order = 1, Required = true)]
    public PowerAutomate.Desktop.PetStore.Client.Pet body { get; set; }
    public override void Execute(ActionContext context)
    {
        try
        {
            using var httpClient = new HttpClient();
            httpClient.BaseAddress = new System.Uri("https://petstore3.swagger.io/api/v3//");
            var client = new PetStoreClient(httpClient);
            client.UpdatePetAsync(body, System.Threading.CancellationToken.None).GetAwaiter().GetResult();
        }
        catch (Exception ex)
        {
            throw new ActionException(ErrorCodes.Unknown, ex.Message, ex);
        }
    }
}

[Action(Id = "FindPetsByStatus")]
[Throws(ErrorCodes.Unknown)]
public class FindPetsByStatusAction : ActionBase
{
    [InputArgument(Order = 1, Required = true)]
    public System.Collections.Generic.List<PowerAutomate.Desktop.PetStore.Client.Anonymous> status { get; set; }
    [OutputArgument(Order = 1)]
    public System.Collections.Generic.List<PowerAutomate.Desktop.PetStore.Client.Pet> Result { get; set; }
    public override void Execute(ActionContext context)
    {
        try
        {
            using var httpClient = new HttpClient();
            httpClient.BaseAddress = new System.Uri("https://petstore3.swagger.io/api/v3//");
            var client = new PetStoreClient(httpClient);
            Result = client.FindPetsByStatusAsync(status, System.Threading.CancellationToken.None).GetAwaiter().GetResult();
        }
        catch (Exception ex)
        {
            throw new ActionException(ErrorCodes.Unknown, ex.Message, ex);
        }
    }
}

[Action(Id = "FindPetsByTags")]
[Throws(ErrorCodes.Unknown)]
public class FindPetsByTagsAction : ActionBase
{
    [InputArgument(Order = 1, Required = true)]
    public System.Collections.Generic.List<System.String> tags { get; set; }
    [OutputArgument(Order = 1)]
    public System.Collections.Generic.List<PowerAutomate.Desktop.PetStore.Client.Pet> Result { get; set; }
    public override void Execute(ActionContext context)
    {
        try
        {
            using var httpClient = new HttpClient();
            httpClient.BaseAddress = new System.Uri("https://petstore3.swagger.io/api/v3//");
            var client = new PetStoreClient(httpClient);
            Result = client.FindPetsByTagsAsync(tags, System.Threading.CancellationToken.None).GetAwaiter().GetResult();
        }
        catch (Exception ex)
        {
            throw new ActionException(ErrorCodes.Unknown, ex.Message, ex);
        }
    }
}

[Action(Id = "GetPetById")]
[Throws(ErrorCodes.Unknown)]
public class GetPetByIdAction : ActionBase
{
    [InputArgument(Order = 1, Required = true)]
    public System.Int64 petId { get; set; }
    [OutputArgument(Order = 1)]
    public PowerAutomate.Desktop.PetStore.Client.Pet Result { get; set; }
    public override void Execute(ActionContext context)
    {
        try
        {
            using var httpClient = new HttpClient();
            httpClient.BaseAddress = new System.Uri("https://petstore3.swagger.io/api/v3//");
            var client = new PetStoreClient(httpClient);
            Result = client.GetPetByIdAsync(petId, System.Threading.CancellationToken.None).GetAwaiter().GetResult();
        }
        catch (Exception ex)
        {
            throw new ActionException(ErrorCodes.Unknown, ex.Message, ex);
        }
    }
}

[Action(Id = "UpdatePetWithForm")]
[Throws(ErrorCodes.Unknown)]
public class UpdatePetWithFormAction : ActionBase
{
    [InputArgument(Order = 1, Required = true)]
    public System.Int64 petId { get; set; }
    [InputArgument(Order = 2, Required = true)]
    public System.String name { get; set; }
    [InputArgument(Order = 3, Required = true)]
    public System.String status { get; set; }
    public override void Execute(ActionContext context)
    {
        try
        {
            using var httpClient = new HttpClient();
            httpClient.BaseAddress = new System.Uri("https://petstore3.swagger.io/api/v3//");
            var client = new PetStoreClient(httpClient);
            client.UpdatePetWithFormAsync(petId, name, status, System.Threading.CancellationToken.None).GetAwaiter().GetResult();
        }
        catch (Exception ex)
        {
            throw new ActionException(ErrorCodes.Unknown, ex.Message, ex);
        }
    }
}

[Action(Id = "DeletePet")]
[Throws(ErrorCodes.Unknown)]
public class DeletePetAction : ActionBase
{
    [InputArgument(Order = 1, Required = true)]
    public System.String api_key { get; set; }
    [InputArgument(Order = 2, Required = true)]
    public System.Int64 petId { get; set; }
    public override void Execute(ActionContext context)
    {
        try
        {
            using var httpClient = new HttpClient();
            httpClient.BaseAddress = new System.Uri("https://petstore3.swagger.io/api/v3//");
            var client = new PetStoreClient(httpClient);
            client.DeletePetAsync(api_key, petId, System.Threading.CancellationToken.None).GetAwaiter().GetResult();
        }
        catch (Exception ex)
        {
            throw new ActionException(ErrorCodes.Unknown, ex.Message, ex);
        }
    }
}

[Action(Id = "GetInventory")]
[Throws(ErrorCodes.Unknown)]
public class GetInventoryAction : ActionBase
{
    [OutputArgument(Order = 1)]
    public System.Collections.Generic.Dictionary<System.String,System.Int32> Result { get; set; }
    public override void Execute(ActionContext context)
    {
        try
        {
            using var httpClient = new HttpClient();
            httpClient.BaseAddress = new System.Uri("https://petstore3.swagger.io/api/v3//");
            var client = new PetStoreClient(httpClient);
            Result = client.GetInventoryAsync(System.Threading.CancellationToken.None).GetAwaiter().GetResult();
        }
        catch (Exception ex)
        {
            throw new ActionException(ErrorCodes.Unknown, ex.Message, ex);
        }
    }
}

[Action(Id = "PlaceOrder")]
[Throws(ErrorCodes.Unknown)]
public class PlaceOrderAction : ActionBase
{
    [InputArgument(Order = 1, Required = true)]
    public PowerAutomate.Desktop.PetStore.Client.Order body { get; set; }
    [OutputArgument(Order = 1)]
    public PowerAutomate.Desktop.PetStore.Client.Order Result { get; set; }
    public override void Execute(ActionContext context)
    {
        try
        {
            using var httpClient = new HttpClient();
            httpClient.BaseAddress = new System.Uri("https://petstore3.swagger.io/api/v3//");
            var client = new PetStoreClient(httpClient);
            Result = client.PlaceOrderAsync(body, System.Threading.CancellationToken.None).GetAwaiter().GetResult();
        }
        catch (Exception ex)
        {
            throw new ActionException(ErrorCodes.Unknown, ex.Message, ex);
        }
    }
}

[Action(Id = "GetOrderById")]
[Throws(ErrorCodes.Unknown)]
public class GetOrderByIdAction : ActionBase
{
    [InputArgument(Order = 1, Required = true)]
    public System.Int64 orderId { get; set; }
    [OutputArgument(Order = 1)]
    public PowerAutomate.Desktop.PetStore.Client.Order Result { get; set; }
    public override void Execute(ActionContext context)
    {
        try
        {
            using var httpClient = new HttpClient();
            httpClient.BaseAddress = new System.Uri("https://petstore3.swagger.io/api/v3//");
            var client = new PetStoreClient(httpClient);
            Result = client.GetOrderByIdAsync(orderId, System.Threading.CancellationToken.None).GetAwaiter().GetResult();
        }
        catch (Exception ex)
        {
            throw new ActionException(ErrorCodes.Unknown, ex.Message, ex);
        }
    }
}

[Action(Id = "DeleteOrder")]
[Throws(ErrorCodes.Unknown)]
public class DeleteOrderAction : ActionBase
{
    [InputArgument(Order = 1, Required = true)]
    public System.Int64 orderId { get; set; }
    public override void Execute(ActionContext context)
    {
        try
        {
            using var httpClient = new HttpClient();
            httpClient.BaseAddress = new System.Uri("https://petstore3.swagger.io/api/v3//");
            var client = new PetStoreClient(httpClient);
            client.DeleteOrderAsync(orderId, System.Threading.CancellationToken.None).GetAwaiter().GetResult();
        }
        catch (Exception ex)
        {
            throw new ActionException(ErrorCodes.Unknown, ex.Message, ex);
        }
    }
}

[Action(Id = "CreateUsersWithListInput")]
[Throws(ErrorCodes.Unknown)]
public class CreateUsersWithListInputAction : ActionBase
{
    [InputArgument(Order = 1, Required = true)]
    public System.Collections.Generic.List<PowerAutomate.Desktop.PetStore.Client.User> body { get; set; }
    public override void Execute(ActionContext context)
    {
        try
        {
            using var httpClient = new HttpClient();
            httpClient.BaseAddress = new System.Uri("https://petstore3.swagger.io/api/v3//");
            var client = new PetStoreClient(httpClient);
            client.CreateUsersWithListInputAsync(body, System.Threading.CancellationToken.None).GetAwaiter().GetResult();
        }
        catch (Exception ex)
        {
            throw new ActionException(ErrorCodes.Unknown, ex.Message, ex);
        }
    }
}

[Action(Id = "GetUserByName")]
[Throws(ErrorCodes.Unknown)]
public class GetUserByNameAction : ActionBase
{
    [InputArgument(Order = 1, Required = true)]
    public System.String username { get; set; }
    [OutputArgument(Order = 1)]
    public PowerAutomate.Desktop.PetStore.Client.User Result { get; set; }
    public override void Execute(ActionContext context)
    {
        try
        {
            using var httpClient = new HttpClient();
            httpClient.BaseAddress = new System.Uri("https://petstore3.swagger.io/api/v3//");
            var client = new PetStoreClient(httpClient);
            Result = client.GetUserByNameAsync(username, System.Threading.CancellationToken.None).GetAwaiter().GetResult();
        }
        catch (Exception ex)
        {
            throw new ActionException(ErrorCodes.Unknown, ex.Message, ex);
        }
    }
}

[Action(Id = "UpdateUser")]
[Throws(ErrorCodes.Unknown)]
public class UpdateUserAction : ActionBase
{
    [InputArgument(Order = 1, Required = true)]
    public System.String username { get; set; }
    [InputArgument(Order = 2, Required = true)]
    public PowerAutomate.Desktop.PetStore.Client.User body { get; set; }
    public override void Execute(ActionContext context)
    {
        try
        {
            using var httpClient = new HttpClient();
            httpClient.BaseAddress = new System.Uri("https://petstore3.swagger.io/api/v3//");
            var client = new PetStoreClient(httpClient);
            client.UpdateUserAsync(username, body, System.Threading.CancellationToken.None).GetAwaiter().GetResult();
        }
        catch (Exception ex)
        {
            throw new ActionException(ErrorCodes.Unknown, ex.Message, ex);
        }
    }
}

[Action(Id = "DeleteUser")]
[Throws(ErrorCodes.Unknown)]
public class DeleteUserAction : ActionBase
{
    [InputArgument(Order = 1, Required = true)]
    public System.String username { get; set; }
    public override void Execute(ActionContext context)
    {
        try
        {
            using var httpClient = new HttpClient();
            httpClient.BaseAddress = new System.Uri("https://petstore3.swagger.io/api/v3//");
            var client = new PetStoreClient(httpClient);
            client.DeleteUserAsync(username, System.Threading.CancellationToken.None).GetAwaiter().GetResult();
        }
        catch (Exception ex)
        {
            throw new ActionException(ErrorCodes.Unknown, ex.Message, ex);
        }
    }
}

[Action(Id = "LoginUser")]
[Throws(ErrorCodes.Unknown)]
public class LoginUserAction : ActionBase
{
    [InputArgument(Order = 1, Required = true)]
    public System.String username { get; set; }
    [InputArgument(Order = 2, Required = true)]
    public System.String password { get; set; }
    [OutputArgument(Order = 1)]
    public System.String Result { get; set; }
    public override void Execute(ActionContext context)
    {
        try
        {
            using var httpClient = new HttpClient();
            httpClient.BaseAddress = new System.Uri("https://petstore3.swagger.io/api/v3//");
            var client = new PetStoreClient(httpClient);
            Result = client.LoginUserAsync(username, password, System.Threading.CancellationToken.None).GetAwaiter().GetResult();
        }
        catch (Exception ex)
        {
            throw new ActionException(ErrorCodes.Unknown, ex.Message, ex);
        }
    }
}

[Action(Id = "LogoutUser")]
[Throws(ErrorCodes.Unknown)]
public class LogoutUserAction : ActionBase
{
    public override void Execute(ActionContext context)
    {
        try
        {
            using var httpClient = new HttpClient();
            httpClient.BaseAddress = new System.Uri("https://petstore3.swagger.io/api/v3//");
            var client = new PetStoreClient(httpClient);
            client.LogoutUserAsync(System.Threading.CancellationToken.None).GetAwaiter().GetResult();
        }
        catch (Exception ex)
        {
            throw new ActionException(ErrorCodes.Unknown, ex.Message, ex);
        }
    }
}

[Action(Id = "CreateUsersWithArrayInput")]
[Throws(ErrorCodes.Unknown)]
public class CreateUsersWithArrayInputAction : ActionBase
{
    [InputArgument(Order = 1, Required = true)]
    public System.Collections.Generic.List<PowerAutomate.Desktop.PetStore.Client.User> body { get; set; }
    public override void Execute(ActionContext context)
    {
        try
        {
            using var httpClient = new HttpClient();
            httpClient.BaseAddress = new System.Uri("https://petstore3.swagger.io/api/v3//");
            var client = new PetStoreClient(httpClient);
            client.CreateUsersWithArrayInputAsync(body, System.Threading.CancellationToken.None).GetAwaiter().GetResult();
        }
        catch (Exception ex)
        {
            throw new ActionException(ErrorCodes.Unknown, ex.Message, ex);
        }
    }
}

[Action(Id = "CreateUser")]
[Throws(ErrorCodes.Unknown)]
public class CreateUserAction : ActionBase
{
    [InputArgument(Order = 1, Required = true)]
    public PowerAutomate.Desktop.PetStore.Client.User body { get; set; }
    public override void Execute(ActionContext context)
    {
        try
        {
            using var httpClient = new HttpClient();
            httpClient.BaseAddress = new System.Uri("https://petstore3.swagger.io/api/v3//");
            var client = new PetStoreClient(httpClient);
            client.CreateUserAsync(body, System.Threading.CancellationToken.None).GetAwaiter().GetResult();
        }
        catch (Exception ex)
        {
            throw new ActionException(ErrorCodes.Unknown, ex.Message, ex);
        }
    }
}

